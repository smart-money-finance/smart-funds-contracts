/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FundV0Interface extends ethers.utils.Interface {
  functions: {
    "activeInvestmentCount()": FunctionFragment;
    "addManualInvestment(address,uint256,string)": FunctionFragment;
    "addManualRedemption(uint256,bool,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "aumUpdater()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistMulti(address[])": FunctionFragment;
    "cancelInvestmentRequest()": FunctionFragment;
    "cancelRedemptionRequest(uint256)": FunctionFragment;
    "closed()": FunctionFragment;
    "contactInfo()": FunctionFragment;
    "createOrUpdateInvestmentRequest(uint256,uint256,uint256,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "createOrUpdateRedemptionRequest(uint256,uint256,uint256,bool)": FunctionFragment;
    "custodian()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "doneImportingInvestments()": FunctionFragment;
    "editAumUpdater(address)": FunctionFragment;
    "editFeeBeneficiary(address)": FunctionFragment;
    "editFees(uint256,uint256)": FunctionFragment;
    "editFundDetails(string,string,string)": FunctionFragment;
    "editInvestorLimits(uint256,uint256,uint256,uint256)": FunctionFragment;
    "feeBeneficiary()": FunctionFragment;
    "feeSweeping()": FunctionFragment;
    "feeSweeps(uint256)": FunctionFragment;
    "feeTimelock()": FunctionFragment;
    "feeWithdrawals(uint256)": FunctionFragment;
    "feesSweptNotWithdrawn()": FunctionFragment;
    "importInvestment(address,uint256,uint256,uint256,uint256,string)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialPrice()": FunctionFragment;
    "initialize(address[2],uint256[9],string,string,string,string,string,bool,address,address,address)": FunctionFragment;
    "investmentRequests(uint256)": FunctionFragment;
    "investments(uint256)": FunctionFragment;
    "investmentsSweptSinceStarted()": FunctionFragment;
    "investorCount()": FunctionFragment;
    "investorInfo(address)": FunctionFragment;
    "investors(uint256)": FunctionFragment;
    "lastFeeSweepEndedTimestamp()": FunctionFragment;
    "logoUrl()": FunctionFragment;
    "managementFee()": FunctionFragment;
    "manager()": FunctionFragment;
    "maxInvestmentsPerInvestor()": FunctionFragment;
    "maxInvestors()": FunctionFragment;
    "minInvestmentAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "navs(uint256)": FunctionFragment;
    "navsLength()": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "processFees(uint256[])": FunctionFragment;
    "processInvestmentRequest(uint256)": FunctionFragment;
    "processRedemptionRequest(uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "redemptionRequests(uint256)": FunctionFragment;
    "redemptionUsdAmount(uint256)": FunctionFragment;
    "redemptions(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tags()": FunctionFragment;
    "timelock()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateAum(uint256,string)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usingUsdToken()": FunctionFragment;
    "version()": FunctionFragment;
    "whitelistMulti(address[])": FunctionFragment;
    "withdrawFees(uint256,bool,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeInvestmentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addManualInvestment",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addManualRedemption",
    values: [
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aumUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklistMulti",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelInvestmentRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRedemptionRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "closed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contactInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOrUpdateInvestmentRequest",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrUpdateRedemptionRequest",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "custodian", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doneImportingInvestments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editAumUpdater",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "editFeeBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "editFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editFundDetails",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "editInvestorLimits",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeSweeping",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeSweeps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeWithdrawals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feesSweptNotWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "importInvestment",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      [string, string],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      string,
      string,
      string,
      string,
      string,
      boolean,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentsSweptSinceStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "investors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFeeSweepEndedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "logoUrl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "managementFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxInvestmentsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minInvestmentAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "navs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "navsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processFees",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "processInvestmentRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processRedemptionRequest",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionUsdAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tags", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAum",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usingUsdToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistMulti",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeInvestmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManualInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManualRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aumUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelInvestmentRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRedemptionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contactInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrUpdateInvestmentRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrUpdateRedemptionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "custodian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doneImportingInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editAumUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editFundDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editInvestorLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeSweeping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeSweeps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesSweptNotWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "importInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investmentsSweptSinceStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "investors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastFeeSweepEndedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "logoUrl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxInvestmentsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minInvestmentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "navs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "navsLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processInvestmentRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processRedemptionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionUsdAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tags", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateAum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usingUsdToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "AumUpdaterChanged(address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Blacklisted(address)": EventFragment;
    "Closed()": EventFragment;
    "DoneImportingInvestments()": EventFragment;
    "FeeBeneficiaryChanged(address)": EventFragment;
    "FeeSweepEnded()": EventFragment;
    "FeeSweepStarted()": EventFragment;
    "FeesChanged(uint256,uint256)": EventFragment;
    "FeesSwept(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "FeesWithdrawn(uint256,address,uint256,uint256,bool)": EventFragment;
    "FundDetailsChanged(string,string,string)": EventFragment;
    "Invested(address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256)": EventFragment;
    "InvestmentRequestCanceled(address,uint256)": EventFragment;
    "InvestmentRequested(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "InvestorLimitsChanged(uint256,uint256,uint256,uint256)": EventFragment;
    "NavUpdated(uint256,uint256,uint256,uint256,string)": EventFragment;
    "Redeemed(address,uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "RedemptionRequestCanceled(address,uint256,uint256)": EventFragment;
    "RedemptionRequested(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Whitelisted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AumUpdaterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DoneImportingInvestments"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeBeneficiaryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSweepEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSweepStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesSwept"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundDetailsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestmentRequestCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestmentRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestorLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NavUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionRequestCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelisted"): EventFragment;
}

export class FundV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FundV0Interface;

  functions: {
    activeInvestmentCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    addManualInvestment(
      investor: string,
      usdAmount: BigNumberish,
      notes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManualRedemption(
      investmentId: BigNumberish,
      transferUsd: boolean,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aumUpdater(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklistMulti(
      _investors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelInvestmentRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRedemptionRequest(
      investmentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closed(overrides?: CallOverrides): Promise<[boolean]>;

    contactInfo(overrides?: CallOverrides): Promise<[string]>;

    createOrUpdateInvestmentRequest(
      usdAmount: BigNumberish,
      minFundAmount: BigNumberish,
      maxFundAmount: BigNumberish,
      deadline: BigNumberish,
      update: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOrUpdateRedemptionRequest(
      investmentId: BigNumberish,
      minUsdAmount: BigNumberish,
      deadline: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    custodian(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doneImportingInvestments(overrides?: CallOverrides): Promise<[boolean]>;

    editAumUpdater(
      _aumUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editFeeBeneficiary(
      _feeBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editFees(
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editFundDetails(
      _logoUrl: string,
      _contactInfo: string,
      _tags: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editInvestorLimits(
      _maxInvestors: BigNumberish,
      _maxInvestmentsPerInvestor: BigNumberish,
      _minInvestmentAmount: BigNumberish,
      _timelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    feeSweeping(overrides?: CallOverrides): Promise<[boolean]>;

    feeSweeps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        investmentId: BigNumber;
        highWaterMark: BigNumber;
        usdManagementFee: BigNumber;
        usdPerformanceFee: BigNumber;
        fundManagementFee: BigNumber;
        fundPerformanceFee: BigNumber;
        timestamp: BigNumber;
      }
    >;

    feeTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber] & {
        to: string;
        fundAmount: BigNumber;
        usdAmount: BigNumber;
        usdTransferred: boolean;
        timestamp: BigNumber;
      }
    >;

    feesSweptNotWithdrawn(overrides?: CallOverrides): Promise<[BigNumber]>;

    importInvestment(
      investor: string,
      usdAmountRemaining: BigNumberish,
      lockupTimestamp: BigNumberish,
      highWaterMark: BigNumberish,
      originalUsdAmount: BigNumberish,
      notes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      addressParams: [string, string],
      uintParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      name: string,
      symbol: string,
      _logoUrl: string,
      _contactInfo: string,
      _tags: string,
      _usingUsdToken: boolean,
      _manager: string,
      _registry: string,
      _usdToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investmentRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        investor: string;
        usdAmount: BigNumber;
        minFundAmount: BigNumber;
        maxFundAmount: BigNumber;
        deadline: BigNumber;
        timestamp: BigNumber;
        investmentId: BigNumber;
        processed: boolean;
      }
    >;

    investments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string
        ] & {
          investor: string;
          timestamp: BigNumber;
          lockupTimestamp: BigNumber;
          initialUsdAmount: BigNumber;
          initialFundAmount: BigNumber;
          initialHighWaterMark: BigNumber;
          managementFeeCostBasis: BigNumber;
          investmentRequestId: BigNumber;
          usdTransferred: boolean;
          imported: boolean;
          notes: string;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        constants: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string
        ] & {
          investor: string;
          timestamp: BigNumber;
          lockupTimestamp: BigNumber;
          initialUsdAmount: BigNumber;
          initialFundAmount: BigNumber;
          initialHighWaterMark: BigNumber;
          managementFeeCostBasis: BigNumber;
          investmentRequestId: BigNumber;
          usdTransferred: boolean;
          imported: boolean;
          notes: string;
        };
        remainingFundAmount: BigNumber;
        usdManagementFeesSwept: BigNumber;
        usdPerformanceFeesSwept: BigNumber;
        fundManagementFeesSwept: BigNumber;
        fundPerformanceFeesSwept: BigNumber;
        highWaterMark: BigNumber;
        feeSweepsCount: BigNumber;
        redemptionRequestId: BigNumber;
        redemptionId: BigNumber;
        redeemed: boolean;
      }
    >;

    investmentsSweptSinceStarted(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    investorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    investorInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        investorId: BigNumber;
        activeInvestmentCount: BigNumber;
        investmentRequestId: BigNumber;
      }
    >;

    investors(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    lastFeeSweepEndedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    logoUrl(overrides?: CallOverrides): Promise<[string]>;

    managementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    maxInvestmentsPerInvestor(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxInvestors(overrides?: CallOverrides): Promise<[BigNumber]>;

    minInvestmentAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    navs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        aum: BigNumber;
        supply: BigNumber;
        totalCapitalContributed: BigNumber;
        timestamp: BigNumber;
        ipfsHash: string;
      }
    >;

    navsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    processFees(
      investmentIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processInvestmentRequest(
      investmentRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processRedemptionRequest(
      redemptionRequestId: BigNumberish,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redemptionRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        investmentId: BigNumber;
        minUsdAmount: BigNumber;
        deadline: BigNumber;
        timestamp: BigNumber;
        redemptionId: BigNumber;
        processed: boolean;
      }
    >;

    redemptionUsdAmount(
      investmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdAmount: BigNumber }>;

    redemptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        investmentId: BigNumber;
        redemptionRequestId: BigNumber;
        fundAmount: BigNumber;
        usdAmount: BigNumber;
        timestamp: BigNumber;
        usdTransferred: boolean;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tags(overrides?: CallOverrides): Promise<[string]>;

    timelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAum(
      _aum: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usingUsdToken(overrides?: CallOverrides): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistMulti(
      _investors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      fundAmount: BigNumberish,
      transferUsd: boolean,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeInvestmentCount(overrides?: CallOverrides): Promise<BigNumber>;

  addManualInvestment(
    investor: string,
    usdAmount: BigNumberish,
    notes: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManualRedemption(
    investmentId: BigNumberish,
    transferUsd: boolean,
    permitValue: BigNumberish,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aumUpdater(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blacklistMulti(
    _investors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelInvestmentRequest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRedemptionRequest(
    investmentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closed(overrides?: CallOverrides): Promise<boolean>;

  contactInfo(overrides?: CallOverrides): Promise<string>;

  createOrUpdateInvestmentRequest(
    usdAmount: BigNumberish,
    minFundAmount: BigNumberish,
    maxFundAmount: BigNumberish,
    deadline: BigNumberish,
    update: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOrUpdateRedemptionRequest(
    investmentId: BigNumberish,
    minUsdAmount: BigNumberish,
    deadline: BigNumberish,
    update: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  custodian(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doneImportingInvestments(overrides?: CallOverrides): Promise<boolean>;

  editAumUpdater(
    _aumUpdater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editFeeBeneficiary(
    _feeBeneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editFees(
    _managementFee: BigNumberish,
    _performanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editFundDetails(
    _logoUrl: string,
    _contactInfo: string,
    _tags: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editInvestorLimits(
    _maxInvestors: BigNumberish,
    _maxInvestmentsPerInvestor: BigNumberish,
    _minInvestmentAmount: BigNumberish,
    _timelock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeBeneficiary(overrides?: CallOverrides): Promise<string>;

  feeSweeping(overrides?: CallOverrides): Promise<boolean>;

  feeSweeps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      investmentId: BigNumber;
      highWaterMark: BigNumber;
      usdManagementFee: BigNumber;
      usdPerformanceFee: BigNumber;
      fundManagementFee: BigNumber;
      fundPerformanceFee: BigNumber;
      timestamp: BigNumber;
    }
  >;

  feeTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  feeWithdrawals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, BigNumber] & {
      to: string;
      fundAmount: BigNumber;
      usdAmount: BigNumber;
      usdTransferred: boolean;
      timestamp: BigNumber;
    }
  >;

  feesSweptNotWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

  importInvestment(
    investor: string,
    usdAmountRemaining: BigNumberish,
    lockupTimestamp: BigNumberish,
    highWaterMark: BigNumberish,
    originalUsdAmount: BigNumberish,
    notes: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    addressParams: [string, string],
    uintParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    name: string,
    symbol: string,
    _logoUrl: string,
    _contactInfo: string,
    _tags: string,
    _usingUsdToken: boolean,
    _manager: string,
    _registry: string,
    _usdToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investmentRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      investor: string;
      usdAmount: BigNumber;
      minFundAmount: BigNumber;
      maxFundAmount: BigNumber;
      deadline: BigNumber;
      timestamp: BigNumber;
      investmentId: BigNumber;
      processed: boolean;
    }
  >;

  investments(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string
      ] & {
        investor: string;
        timestamp: BigNumber;
        lockupTimestamp: BigNumber;
        initialUsdAmount: BigNumber;
        initialFundAmount: BigNumber;
        initialHighWaterMark: BigNumber;
        managementFeeCostBasis: BigNumber;
        investmentRequestId: BigNumber;
        usdTransferred: boolean;
        imported: boolean;
        notes: string;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      constants: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string
      ] & {
        investor: string;
        timestamp: BigNumber;
        lockupTimestamp: BigNumber;
        initialUsdAmount: BigNumber;
        initialFundAmount: BigNumber;
        initialHighWaterMark: BigNumber;
        managementFeeCostBasis: BigNumber;
        investmentRequestId: BigNumber;
        usdTransferred: boolean;
        imported: boolean;
        notes: string;
      };
      remainingFundAmount: BigNumber;
      usdManagementFeesSwept: BigNumber;
      usdPerformanceFeesSwept: BigNumber;
      fundManagementFeesSwept: BigNumber;
      fundPerformanceFeesSwept: BigNumber;
      highWaterMark: BigNumber;
      feeSweepsCount: BigNumber;
      redemptionRequestId: BigNumber;
      redemptionId: BigNumber;
      redeemed: boolean;
    }
  >;

  investmentsSweptSinceStarted(overrides?: CallOverrides): Promise<BigNumber>;

  investorCount(overrides?: CallOverrides): Promise<BigNumber>;

  investorInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      investorId: BigNumber;
      activeInvestmentCount: BigNumber;
      investmentRequestId: BigNumber;
    }
  >;

  investors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  lastFeeSweepEndedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  logoUrl(overrides?: CallOverrides): Promise<string>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  manager(overrides?: CallOverrides): Promise<string>;

  maxInvestmentsPerInvestor(overrides?: CallOverrides): Promise<BigNumber>;

  maxInvestors(overrides?: CallOverrides): Promise<BigNumber>;

  minInvestmentAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  navs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      aum: BigNumber;
      supply: BigNumber;
      totalCapitalContributed: BigNumber;
      timestamp: BigNumber;
      ipfsHash: string;
    }
  >;

  navsLength(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  processFees(
    investmentIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processInvestmentRequest(
    investmentRequestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processRedemptionRequest(
    redemptionRequestId: BigNumberish,
    permitValue: BigNumberish,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redemptionRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      investmentId: BigNumber;
      minUsdAmount: BigNumber;
      deadline: BigNumber;
      timestamp: BigNumber;
      redemptionId: BigNumber;
      processed: boolean;
    }
  >;

  redemptionUsdAmount(
    investmentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redemptions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      investmentId: BigNumber;
      redemptionRequestId: BigNumber;
      fundAmount: BigNumber;
      usdAmount: BigNumber;
      timestamp: BigNumber;
      usdTransferred: boolean;
    }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  tags(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAum(
    _aum: BigNumberish,
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usingUsdToken(overrides?: CallOverrides): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistMulti(
    _investors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    fundAmount: BigNumberish,
    transferUsd: boolean,
    permitValue: BigNumberish,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeInvestmentCount(overrides?: CallOverrides): Promise<BigNumber>;

    addManualInvestment(
      investor: string,
      usdAmount: BigNumberish,
      notes: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addManualRedemption(
      investmentId: BigNumberish,
      transferUsd: boolean,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    aumUpdater(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistMulti(
      _investors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelInvestmentRequest(overrides?: CallOverrides): Promise<void>;

    cancelRedemptionRequest(
      investmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closed(overrides?: CallOverrides): Promise<boolean>;

    contactInfo(overrides?: CallOverrides): Promise<string>;

    createOrUpdateInvestmentRequest(
      usdAmount: BigNumberish,
      minFundAmount: BigNumberish,
      maxFundAmount: BigNumberish,
      deadline: BigNumberish,
      update: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrUpdateRedemptionRequest(
      investmentId: BigNumberish,
      minUsdAmount: BigNumberish,
      deadline: BigNumberish,
      update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    custodian(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    doneImportingInvestments(overrides?: CallOverrides): Promise<boolean>;

    editAumUpdater(
      _aumUpdater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editFeeBeneficiary(
      _feeBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editFees(
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editFundDetails(
      _logoUrl: string,
      _contactInfo: string,
      _tags: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editInvestorLimits(
      _maxInvestors: BigNumberish,
      _maxInvestmentsPerInvestor: BigNumberish,
      _minInvestmentAmount: BigNumberish,
      _timelock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeBeneficiary(overrides?: CallOverrides): Promise<string>;

    feeSweeping(overrides?: CallOverrides): Promise<boolean>;

    feeSweeps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        investmentId: BigNumber;
        highWaterMark: BigNumber;
        usdManagementFee: BigNumber;
        usdPerformanceFee: BigNumber;
        fundManagementFee: BigNumber;
        fundPerformanceFee: BigNumber;
        timestamp: BigNumber;
      }
    >;

    feeTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    feeWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber] & {
        to: string;
        fundAmount: BigNumber;
        usdAmount: BigNumber;
        usdTransferred: boolean;
        timestamp: BigNumber;
      }
    >;

    feesSweptNotWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

    importInvestment(
      investor: string,
      usdAmountRemaining: BigNumberish,
      lockupTimestamp: BigNumberish,
      highWaterMark: BigNumberish,
      originalUsdAmount: BigNumberish,
      notes: string,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      addressParams: [string, string],
      uintParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      name: string,
      symbol: string,
      _logoUrl: string,
      _contactInfo: string,
      _tags: string,
      _usingUsdToken: boolean,
      _manager: string,
      _registry: string,
      _usdToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    investmentRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        investor: string;
        usdAmount: BigNumber;
        minFundAmount: BigNumber;
        maxFundAmount: BigNumber;
        deadline: BigNumber;
        timestamp: BigNumber;
        investmentId: BigNumber;
        processed: boolean;
      }
    >;

    investments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string
        ] & {
          investor: string;
          timestamp: BigNumber;
          lockupTimestamp: BigNumber;
          initialUsdAmount: BigNumber;
          initialFundAmount: BigNumber;
          initialHighWaterMark: BigNumber;
          managementFeeCostBasis: BigNumber;
          investmentRequestId: BigNumber;
          usdTransferred: boolean;
          imported: boolean;
          notes: string;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        constants: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string
        ] & {
          investor: string;
          timestamp: BigNumber;
          lockupTimestamp: BigNumber;
          initialUsdAmount: BigNumber;
          initialFundAmount: BigNumber;
          initialHighWaterMark: BigNumber;
          managementFeeCostBasis: BigNumber;
          investmentRequestId: BigNumber;
          usdTransferred: boolean;
          imported: boolean;
          notes: string;
        };
        remainingFundAmount: BigNumber;
        usdManagementFeesSwept: BigNumber;
        usdPerformanceFeesSwept: BigNumber;
        fundManagementFeesSwept: BigNumber;
        fundPerformanceFeesSwept: BigNumber;
        highWaterMark: BigNumber;
        feeSweepsCount: BigNumber;
        redemptionRequestId: BigNumber;
        redemptionId: BigNumber;
        redeemed: boolean;
      }
    >;

    investmentsSweptSinceStarted(overrides?: CallOverrides): Promise<BigNumber>;

    investorCount(overrides?: CallOverrides): Promise<BigNumber>;

    investorInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        investorId: BigNumber;
        activeInvestmentCount: BigNumber;
        investmentRequestId: BigNumber;
      }
    >;

    investors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    lastFeeSweepEndedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    logoUrl(overrides?: CallOverrides): Promise<string>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    maxInvestmentsPerInvestor(overrides?: CallOverrides): Promise<BigNumber>;

    maxInvestors(overrides?: CallOverrides): Promise<BigNumber>;

    minInvestmentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    navs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        aum: BigNumber;
        supply: BigNumber;
        totalCapitalContributed: BigNumber;
        timestamp: BigNumber;
        ipfsHash: string;
      }
    >;

    navsLength(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    processFees(
      investmentIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    processInvestmentRequest(
      investmentRequestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processRedemptionRequest(
      redemptionRequestId: BigNumberish,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        investmentId: BigNumber;
        minUsdAmount: BigNumber;
        deadline: BigNumber;
        timestamp: BigNumber;
        redemptionId: BigNumber;
        processed: boolean;
      }
    >;

    redemptionUsdAmount(
      investmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        investmentId: BigNumber;
        redemptionRequestId: BigNumber;
        fundAmount: BigNumber;
        usdAmount: BigNumber;
        timestamp: BigNumber;
        usdTransferred: boolean;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    tags(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAum(
      _aum: BigNumberish,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usingUsdToken(overrides?: CallOverrides): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMulti(
      _investors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(
      fundAmount: BigNumberish,
      transferUsd: boolean,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    AumUpdaterChanged(
      aumUpdater?: null
    ): TypedEventFilter<[string], { aumUpdater: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    Blacklisted(
      investor?: string | null
    ): TypedEventFilter<[string], { investor: string }>;

    Closed(): TypedEventFilter<[], {}>;

    DoneImportingInvestments(): TypedEventFilter<[], {}>;

    FeeBeneficiaryChanged(
      feeBeneficiary?: null
    ): TypedEventFilter<[string], { feeBeneficiary: string }>;

    FeeSweepEnded(): TypedEventFilter<[], {}>;

    FeeSweepStarted(): TypedEventFilter<[], {}>;

    FeesChanged(
      managementFee?: null,
      performanceFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { managementFee: BigNumber; performanceFee: BigNumber }
    >;

    FeesSwept(
      investor?: string | null,
      investmentId?: BigNumberish | null,
      feeSweepId?: BigNumberish | null,
      highWaterMark?: null,
      usdManagementFee?: null,
      usdPerformanceFee?: null,
      fundManagementFee?: null,
      fundPerformanceFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        investor: string;
        investmentId: BigNumber;
        feeSweepId: BigNumber;
        highWaterMark: BigNumber;
        usdManagementFee: BigNumber;
        usdPerformanceFee: BigNumber;
        fundManagementFee: BigNumber;
        fundPerformanceFee: BigNumber;
      }
    >;

    FeesWithdrawn(
      feeWithdrawalId?: null,
      to?: null,
      fundAmount?: null,
      usdAmount?: null,
      usdTransferred?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, boolean],
      {
        feeWithdrawalId: BigNumber;
        to: string;
        fundAmount: BigNumber;
        usdAmount: BigNumber;
        usdTransferred: boolean;
      }
    >;

    FundDetailsChanged(
      logoUrl?: null,
      contactInfo?: null,
      tags?: null
    ): TypedEventFilter<
      [string, string, string],
      { logoUrl: string; contactInfo: string; tags: string }
    >;

    Invested(
      investor?: string | null,
      investmentId?: BigNumberish | null,
      investmentRequestId?: BigNumberish | null,
      usdAmount?: null,
      fundAmount?: null,
      imported?: null,
      initialHighWaterMark?: null,
      managementFeeCostBasis?: null,
      lockupTimestamp?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        investor: string;
        investmentId: BigNumber;
        investmentRequestId: BigNumber;
        usdAmount: BigNumber;
        fundAmount: BigNumber;
        imported: boolean;
        initialHighWaterMark: BigNumber;
        managementFeeCostBasis: BigNumber;
        lockupTimestamp: BigNumber;
      }
    >;

    InvestmentRequestCanceled(
      investor?: string | null,
      investmentRequestId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { investor: string; investmentRequestId: BigNumber }
    >;

    InvestmentRequested(
      investor?: string | null,
      investmentRequestId?: BigNumberish | null,
      usdAmount?: null,
      minFundAmount?: null,
      maxFundAmount?: null,
      deadline?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        investor: string;
        investmentRequestId: BigNumber;
        usdAmount: BigNumber;
        minFundAmount: BigNumber;
        maxFundAmount: BigNumber;
        deadline: BigNumber;
      }
    >;

    InvestorLimitsChanged(
      maxInvestors?: null,
      maxInvestmentsPerInvestor?: null,
      minInvestmentAmount?: null,
      timelock?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        maxInvestors: BigNumber;
        maxInvestmentsPerInvestor: BigNumber;
        minInvestmentAmount: BigNumber;
        timelock: BigNumber;
      }
    >;

    NavUpdated(
      navId?: null,
      aum?: null,
      supply?: null,
      totalCapitalContributed?: null,
      ipfsHash?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        navId: BigNumber;
        aum: BigNumber;
        supply: BigNumber;
        totalCapitalContributed: BigNumber;
        ipfsHash: string;
      }
    >;

    Redeemed(
      investor?: string | null,
      investmentId?: BigNumberish | null,
      redemptionId?: BigNumberish | null,
      redemptionRequestId?: null,
      fundAmount?: null,
      usdAmount?: null,
      usdTransferred?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
      {
        investor: string;
        investmentId: BigNumber;
        redemptionId: BigNumber;
        redemptionRequestId: BigNumber;
        fundAmount: BigNumber;
        usdAmount: BigNumber;
        usdTransferred: boolean;
      }
    >;

    RedemptionRequestCanceled(
      investor?: string | null,
      investmentId?: BigNumberish | null,
      redemptionRequestId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        investor: string;
        investmentId: BigNumber;
        redemptionRequestId: BigNumber;
      }
    >;

    RedemptionRequested(
      investor?: string | null,
      investmentId?: BigNumberish | null,
      redemptionRequestId?: BigNumberish | null,
      minUsdAmount?: null,
      deadline?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        investor: string;
        investmentId: BigNumber;
        redemptionRequestId: BigNumber;
        minUsdAmount: BigNumber;
        deadline: BigNumber;
      }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Whitelisted(
      investor?: string | null
    ): TypedEventFilter<[string], { investor: string }>;
  };

  estimateGas: {
    activeInvestmentCount(overrides?: CallOverrides): Promise<BigNumber>;

    addManualInvestment(
      investor: string,
      usdAmount: BigNumberish,
      notes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManualRedemption(
      investmentId: BigNumberish,
      transferUsd: boolean,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aumUpdater(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistMulti(
      _investors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelInvestmentRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRedemptionRequest(
      investmentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closed(overrides?: CallOverrides): Promise<BigNumber>;

    contactInfo(overrides?: CallOverrides): Promise<BigNumber>;

    createOrUpdateInvestmentRequest(
      usdAmount: BigNumberish,
      minFundAmount: BigNumberish,
      maxFundAmount: BigNumberish,
      deadline: BigNumberish,
      update: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOrUpdateRedemptionRequest(
      investmentId: BigNumberish,
      minUsdAmount: BigNumberish,
      deadline: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    custodian(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doneImportingInvestments(overrides?: CallOverrides): Promise<BigNumber>;

    editAumUpdater(
      _aumUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editFeeBeneficiary(
      _feeBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editFees(
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editFundDetails(
      _logoUrl: string,
      _contactInfo: string,
      _tags: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editInvestorLimits(
      _maxInvestors: BigNumberish,
      _maxInvestmentsPerInvestor: BigNumberish,
      _minInvestmentAmount: BigNumberish,
      _timelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    feeSweeping(overrides?: CallOverrides): Promise<BigNumber>;

    feeSweeps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    feeWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesSweptNotWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

    importInvestment(
      investor: string,
      usdAmountRemaining: BigNumberish,
      lockupTimestamp: BigNumberish,
      highWaterMark: BigNumberish,
      originalUsdAmount: BigNumberish,
      notes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      addressParams: [string, string],
      uintParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      name: string,
      symbol: string,
      _logoUrl: string,
      _contactInfo: string,
      _tags: string,
      _usingUsdToken: boolean,
      _manager: string,
      _registry: string,
      _usdToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investmentRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investmentsSweptSinceStarted(overrides?: CallOverrides): Promise<BigNumber>;

    investorCount(overrides?: CallOverrides): Promise<BigNumber>;

    investorInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    investors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastFeeSweepEndedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    logoUrl(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    maxInvestmentsPerInvestor(overrides?: CallOverrides): Promise<BigNumber>;

    maxInvestors(overrides?: CallOverrides): Promise<BigNumber>;

    minInvestmentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    navs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    navsLength(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    processFees(
      investmentIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processInvestmentRequest(
      investmentRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processRedemptionRequest(
      redemptionRequestId: BigNumberish,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redemptionRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptionUsdAmount(
      investmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tags(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAum(
      _aum: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usingUsdToken(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMulti(
      _investors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      fundAmount: BigNumberish,
      transferUsd: boolean,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeInvestmentCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addManualInvestment(
      investor: string,
      usdAmount: BigNumberish,
      notes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManualRedemption(
      investmentId: BigNumberish,
      transferUsd: boolean,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aumUpdater(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistMulti(
      _investors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelInvestmentRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRedemptionRequest(
      investmentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contactInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOrUpdateInvestmentRequest(
      usdAmount: BigNumberish,
      minFundAmount: BigNumberish,
      maxFundAmount: BigNumberish,
      deadline: BigNumberish,
      update: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOrUpdateRedemptionRequest(
      investmentId: BigNumberish,
      minUsdAmount: BigNumberish,
      deadline: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    custodian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doneImportingInvestments(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editAumUpdater(
      _aumUpdater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editFeeBeneficiary(
      _feeBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editFees(
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editFundDetails(
      _logoUrl: string,
      _contactInfo: string,
      _tags: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editInvestorLimits(
      _maxInvestors: BigNumberish,
      _maxInvestmentsPerInvestor: BigNumberish,
      _minInvestmentAmount: BigNumberish,
      _timelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSweeping(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSweeps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeTimelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesSweptNotWithdrawn(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    importInvestment(
      investor: string,
      usdAmountRemaining: BigNumberish,
      lockupTimestamp: BigNumberish,
      highWaterMark: BigNumberish,
      originalUsdAmount: BigNumberish,
      notes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      addressParams: [string, string],
      uintParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      name: string,
      symbol: string,
      _logoUrl: string,
      _contactInfo: string,
      _tags: string,
      _usingUsdToken: boolean,
      _manager: string,
      _registry: string,
      _usdToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investmentRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investmentsSweptSinceStarted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investorInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastFeeSweepEndedTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    logoUrl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxInvestmentsPerInvestor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxInvestors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minInvestmentAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    navs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    navsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processFees(
      investmentIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processInvestmentRequest(
      investmentRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processRedemptionRequest(
      redemptionRequestId: BigNumberish,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redemptionRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redemptionUsdAmount(
      investmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redemptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tags(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAum(
      _aum: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usingUsdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistMulti(
      _investors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      fundAmount: BigNumberish,
      transferUsd: boolean,
      permitValue: BigNumberish,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
