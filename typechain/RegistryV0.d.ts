/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RegistryV0Interface extends ethers.utils.Interface {
  functions: {
    "addNewFundImplementation(address)": FunctionFragment;
    "allFunds()": FunctionFragment;
    "bypassWhitelist()": FunctionFragment;
    "enableBypassWhitelist()": FunctionFragment;
    "fundImplementations(uint256)": FunctionFragment;
    "funds(uint256)": FunctionFragment;
    "initialize(address,address,bool)": FunctionFragment;
    "latestFundVersion()": FunctionFragment;
    "managerToFund(address)": FunctionFragment;
    "managerWhitelist(address)": FunctionFragment;
    "newFund(address[2],uint256[9],string,string,string,string,string,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usdToken()": FunctionFragment;
    "version()": FunctionFragment;
    "whitelistMulti(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNewFundImplementation",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "allFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bypassWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableBypassWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundImplementations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "funds", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "latestFundVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerToFund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "managerWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newFund",
    values: [
      [string, string],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      string,
      string,
      string,
      string,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usdToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistMulti",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewFundImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bypassWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBypassWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "funds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestFundVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerToFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newFund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMulti",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FundCreated(address)": EventFragment;
    "ManagerWhitelisted(address)": EventFragment;
    "NewFundImplementation(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFundImplementation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class RegistryV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryV0Interface;

  functions: {
    addNewFundImplementation(
      fundImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allFunds(overrides?: CallOverrides): Promise<[string[]]>;

    bypassWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    enableBypassWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundImplementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    funds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    initialize(
      fundImplementation: string,
      _usdToken: string,
      _bypassWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestFundVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    managerToFund(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    managerWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newFund(
      addressParams: [string, string],
      uintParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      name: string,
      symbol: string,
      logoUrl: string,
      contactInfo: string,
      tags: string,
      usingUsdToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdToken(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistMulti(
      managers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addNewFundImplementation(
    fundImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allFunds(overrides?: CallOverrides): Promise<string[]>;

  bypassWhitelist(overrides?: CallOverrides): Promise<boolean>;

  enableBypassWhitelist(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundImplementations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  funds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  initialize(
    fundImplementation: string,
    _usdToken: string,
    _bypassWhitelist: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestFundVersion(overrides?: CallOverrides): Promise<BigNumber>;

  managerToFund(arg0: string, overrides?: CallOverrides): Promise<string>;

  managerWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  newFund(
    addressParams: [string, string],
    uintParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    name: string,
    symbol: string,
    logoUrl: string,
    contactInfo: string,
    tags: string,
    usingUsdToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdToken(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistMulti(
    managers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNewFundImplementation(
      fundImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allFunds(overrides?: CallOverrides): Promise<string[]>;

    bypassWhitelist(overrides?: CallOverrides): Promise<boolean>;

    enableBypassWhitelist(overrides?: CallOverrides): Promise<void>;

    fundImplementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    funds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    initialize(
      fundImplementation: string,
      _usdToken: string,
      _bypassWhitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    latestFundVersion(overrides?: CallOverrides): Promise<BigNumber>;

    managerToFund(arg0: string, overrides?: CallOverrides): Promise<string>;

    managerWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    newFund(
      addressParams: [string, string],
      uintParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      name: string,
      symbol: string,
      logoUrl: string,
      contactInfo: string,
      tags: string,
      usingUsdToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usdToken(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMulti(
      managers: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    FundCreated(
      fund?: string | null
    ): TypedEventFilter<[string], { fund: string }>;

    ManagerWhitelisted(
      manager?: string | null
    ): TypedEventFilter<[string], { manager: string }>;

    NewFundImplementation(
      fundImplementation?: null,
      version?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { fundImplementation: string; version: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    addNewFundImplementation(
      fundImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allFunds(overrides?: CallOverrides): Promise<BigNumber>;

    bypassWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    enableBypassWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundImplementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    funds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      fundImplementation: string,
      _usdToken: string,
      _bypassWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestFundVersion(overrides?: CallOverrides): Promise<BigNumber>;

    managerToFund(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    managerWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newFund(
      addressParams: [string, string],
      uintParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      name: string,
      symbol: string,
      logoUrl: string,
      contactInfo: string,
      tags: string,
      usingUsdToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdToken(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMulti(
      managers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewFundImplementation(
      fundImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bypassWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableBypassWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundImplementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    funds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      fundImplementation: string,
      _usdToken: string,
      _bypassWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestFundVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerToFund(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managerWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newFund(
      addressParams: [string, string],
      uintParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      name: string,
      symbol: string,
      logoUrl: string,
      contactInfo: string,
      tags: string,
      usingUsdToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistMulti(
      managers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
